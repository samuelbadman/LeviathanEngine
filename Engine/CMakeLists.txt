cmake_minimum_required(VERSION "3.28.0")

# Set project configuration types.
set(CMAKE_CONFIGURATION_TYPES Debug;Release;RelWithDebInfo;MinSizeRel;Master)

# Create project.
project("LeviathanEngine")

# Set output directories.
set(BINARY_OUTPUT_DIRECTORY "Binary")
set(EXECUTABLE_OUTPUT_BINARY_DIRECTORY "${BINARY_OUTPUT_DIRECTORY}/Executable/$<CONFIG>")
set(LIBRARY_OUTPUT_BINARY_DIRECTORY "${BINARY_OUTPUT_DIRECTORY}/Library/$<CONFIG>")

set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY "${LIBRARY_OUTPUT_BINARY_DIRECTORY}")
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY "${LIBRARY_OUTPUT_BINARY_DIRECTORY}")
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY "${EXECUTABLE_OUTPUT_BINARY_DIRECTORY}")

# Configure build settings.
set(CPP_STANDARD 23)
set(ENABLE_STRICT_WARNINGS ON)

# Only one platform build target can be set to ON at a time.
set(BUILD_PLATFORM_WIN32 ON)

# Only one renderer api can be set to ON at a time and must be supported by the build platform.
# TODO: Create documentation stating what renderer apis are supported by what platform. For now, only including direct3d12 and vulkan and these are both supported by win32.
set(BUILD_RENDERER_API_DIRECT3D12 ON)
set(BUILD_RENDERER_API_VULKAN OFF)

# Declare build definitions.
set(BUILD_CONFIG_DEBUG_DEFINITION "LEVIATHAN_BUILD_CONFIG_DEBUG")
set(BUILD_CONFIG_RELEASE_DEFINITION "LEVIATHAN_BUILD_CONFIG_RELEASE")
set(BUILD_CONFIG_RELWITHDEBINFO_DEFINITION "LEVIATHAN_BUILD_CONFIG_RELWITHDEBINFO")
set(BUILD_CONFIG_MINSIZEREL_DEFINITION "LEVIATHAN_BUILD_CONFIG_MINSIZEREL")
set(BUILD_CONFIG_MASTER_DEFINITION "LEVIATHAN_BUILD_CONFIG_MASTER")

set(BUILD_PLATFORM_WIN32_DEFINITION "LEVIATHAN_BUILD_PLATFORM_WIN32")

set(BUILD_RENDERER_API_DIRECT3D12_DEFINITION "LEVIATHAN_BUILD_RENDERER_API_DIRECT3D12")
set(BUILD_RENDERER_API_VULKAN_DEFINITION "LEVIATHAN_BUILD_RENDERER_API_VULKAN")

# Adds the compile definition to project wide pre-processor definitions if the condition variable matches ON.
function(add_compile_definition_if_enabled condition definition)
	if(${${condition}} MATCHES ON)
		add_compile_definitions(${${definition}})
	endif()
endfunction()

# Add project wide pre-processor definitions.
add_compile_definitions("$<$<CONFIG:Debug>:${BUILD_CONFIG_DEBUG_DEFINITION}>")
add_compile_definitions("$<$<CONFIG:Release>:${BUILD_CONFIG_RELEASE_DEFINITION}>")
add_compile_definitions("$<$<CONFIG:RelWithDebInfo>:${BUILD_CONFIG_RELWITHDEBINFO_DEFINITION};${BUILD_CONFIG_RELEASE_DEFINITION}>")
add_compile_definitions("$<$<CONFIG:MinSizeRel>:${BUILD_CONFIG_MINSIZEREL_DEFINITION};${BUILD_CONFIG_RELEASE_DEFINITION}>")
add_compile_definitions("$<$<CONFIG:Master>:${BUILD_CONFIG_MASTER_DEFINITION}>")

add_compile_definition_if_enabled(BUILD_PLATFORM_WIN32 BUILD_PLATFORM_WIN32_DEFINITION)
add_compile_definition_if_enabled(BUILD_RENDERER_API_DIRECT3D12 BUILD_RENDERER_API_DIRECT3D12_DEFINITION)
add_compile_definition_if_enabled(BUILD_RENDERER_API_VULKAN BUILD_RENDERER_API_VULKAN_DEFINITION)

# Adds a library target with optional arguments to the project. Arguments are unnamed to be optional so that empty strings can be supported in a function parameter. 
# Optional arguments must be entered in the order: TARGET_NAME PRECOMPILED_HEADERS HEADERS SOURCES LINK_LIBRARIES INCLUDE_DIRECTORIES CPP_STANDARD ENABLE_STRICT_WARNING_LEVEL.
function(add_library_target)
	add_library("${ARGV0}" STATIC "${ARGV2}" "${ARGV3}")
	set_property(TARGET "${ARGV0}" PROPERTY CXX_STANDARD ${ARGV6})
	
	if("${ARGV7}" MATCHES ON)
		target_compile_options("${ARGV0}" PRIVATE $<$<CXX_COMPILER_ID:MSVC>:/W4 /WX> $<$<NOT:$<CXX_COMPILER_ID:MSVC>>:-Wall -Wextra -Wpedantic -Werror>)	
	endif()
	
	target_precompile_headers("${ARGV0}" PRIVATE "${ARGV1}")
	target_link_libraries("${ARGV0}" "${ARGV4}")
	target_include_directories("${ARGV0}" PRIVATE "${ARGV5}")
endfunction()

# Adds an executable target with optional arguments to the project. Arguments are unnamed to be optional so that empty strings can be supported in a function parameter. 
# Optional arguments must be entered in the order: TARGET_NAME PRECOMPILED_HEADERS HEADERS SOURCES LINK_LIBRARIES INCLUDE_DIRECTORIES CPP_STANDARD ENABLE_STRICT_WARNING_LEVEL.
function(add_executable_target [IN_TARGET_NAME IN_PRECOMPILED_HEADERS IN_HEADERS IN_SOURCES IN_LINK_LIBRARIES IN_INCLUDE_DIRECTORIES])
	if(BUILD_PLATFORM_WIN32 MATCHES ON)
		add_executable("${ARGV0}" WIN32 "${ARGV2}" "${ARGV3}")
	else()
		add_executable("${ARGV0}" "${ARGV2}" "${ARGV3}")
	endif()
	
	set_property(TARGET "${ARGV0}" PROPERTY CXX_STANDARD ${ARGV6})
	
	if("${ARGV7}" MATCHES ON)
		target_compile_options("${ARGV0}" PRIVATE $<$<CXX_COMPILER_ID:MSVC>:/W4 /WX> $<$<NOT:$<CXX_COMPILER_ID:MSVC>>:-Wall -Wextra -Wpedantic -Werror>)
	endif()
	
	target_precompile_headers("${ARGV0}" PRIVATE "${ARGV1}")
	target_link_libraries("${ARGV0}" "${ARGV4}")
	target_include_directories("${ARGV0}" PRIVATE "${ARGV5}")
endfunction()

# Set module directories.
set(MODULE_DIRECTORY "Modules")
set(MODULE_SOURCE_DIRECTORY_NAME "Source")
set(MODULE_PUBLIC_DIRECTORY_NAME "Public")
set(MODULE_PRIVATE_DIRECTORY_NAME "Private")

# Add engine module library targets.
#########################################################################

# Leviathan core.
set(LEVIATHAN_CORE_NAME "LeviathanCore")
set(LEVIATHAN_CORE_SOURCE_DIRECTORY "${MODULE_DIRECTORY}/${LEVIATHAN_CORE_NAME}/${MODULE_SOURCE_DIRECTORY_NAME}")
set(LEVIATHAN_CORE_PRECOMPILED_HEADERS 
	"${LEVIATHAN_CORE_SOURCE_DIRECTORY}/${MODULE_PRIVATE_DIRECTORY_NAME}/LeviathanCorePch.h"
)
set(LEVIATHAN_CORE_HEADERS 
	"${LEVIATHAN_CORE_SOURCE_DIRECTORY}/${MODULE_PUBLIC_DIRECTORY_NAME}/LeviathanCore.h"
	"${LEVIATHAN_CORE_SOURCE_DIRECTORY}/${MODULE_PUBLIC_DIRECTORY_NAME}/PlatformEntryPrototype.h"
	"${LEVIATHAN_CORE_SOURCE_DIRECTORY}/${MODULE_PUBLIC_DIRECTORY_NAME}/Platform.h"
	"${LEVIATHAN_CORE_SOURCE_DIRECTORY}/${MODULE_PUBLIC_DIRECTORY_NAME}/Core.h"
	"${LEVIATHAN_CORE_SOURCE_DIRECTORY}/${MODULE_PUBLIC_DIRECTORY_NAME}/Callback.h"
	"${LEVIATHAN_CORE_SOURCE_DIRECTORY}/${MODULE_PRIVATE_DIRECTORY_NAME}/PlatformWindow.h"
	"${LEVIATHAN_CORE_SOURCE_DIRECTORY}/${MODULE_PUBLIC_DIRECTORY_NAME}/InputKey.h"
	"${LEVIATHAN_CORE_SOURCE_DIRECTORY}/${MODULE_PUBLIC_DIRECTORY_NAME}/Bits.h"
	"${LEVIATHAN_CORE_SOURCE_DIRECTORY}/${MODULE_PUBLIC_DIRECTORY_NAME}/Logging.h"
	"${LEVIATHAN_CORE_SOURCE_DIRECTORY}/${MODULE_PUBLIC_DIRECTORY_NAME}/Text.h"
)
set(LEVIATHAN_CORE_SOURCES 
	"${LEVIATHAN_CORE_SOURCE_DIRECTORY}/${MODULE_PRIVATE_DIRECTORY_NAME}/LeviathanCore.cpp"
	"${LEVIATHAN_CORE_SOURCE_DIRECTORY}/${MODULE_PRIVATE_DIRECTORY_NAME}/Core.cpp"
	"${LEVIATHAN_CORE_SOURCE_DIRECTORY}/${MODULE_PRIVATE_DIRECTORY_NAME}/InputKey.cpp"
	"${LEVIATHAN_CORE_SOURCE_DIRECTORY}/${MODULE_PRIVATE_DIRECTORY_NAME}/Logging.cpp"
	"${LEVIATHAN_CORE_SOURCE_DIRECTORY}/${MODULE_PRIVATE_DIRECTORY_NAME}/Text.cpp"
)
set(LEVIATHAN_CORE_LINK_LIBRARIES 
	""
)
set(LEVIATHAN_CORE_INCLUDE_DIRECTORIES 
	"${PROJECT_SOURCE_DIR}/${LEVIATHAN_CORE_SOURCE_DIRECTORY}/${MODULE_PUBLIC_DIRECTORY_NAME}" 
	"${PROJECT_SOURCE_DIR}/${LEVIATHAN_CORE_SOURCE_DIRECTORY}/${MODULE_PRIVATE_DIRECTORY_NAME}"
)

if(BUILD_PLATFORM_WIN32 MATCHES ON)
	set(LEVIATHAN_CORE_HEADERS 
		"${LEVIATHAN_CORE_HEADERS}"
		"${LEVIATHAN_CORE_SOURCE_DIRECTORY}/${MODULE_PRIVATE_DIRECTORY_NAME}/Win32Window.h"
	)
	set(LEVIATHAN_CORE_SOURCES 
		"${LEVIATHAN_CORE_SOURCES}"
		"${LEVIATHAN_CORE_SOURCE_DIRECTORY}/${MODULE_PRIVATE_DIRECTORY_NAME}/Win32Platform.cpp"
		"${LEVIATHAN_CORE_SOURCE_DIRECTORY}/${MODULE_PRIVATE_DIRECTORY_NAME}/Win32Window.cpp"
	)
	set(LEVIATHAN_CORE_LINK_LIBRARIES 
		"${LEVIATHAN_CORE_LINK_LIBRARIES}"
	)
endif()

add_library_target(
	"${LEVIATHAN_CORE_NAME}"
	"${LEVIATHAN_CORE_PRECOMPILED_HEADERS}"
	"${LEVIATHAN_CORE_HEADERS}"
	"${LEVIATHAN_CORE_SOURCES}"
	"${LEVIATHAN_CORE_LINK_LIBRARIES}"
	"${LEVIATHAN_CORE_INCLUDE_DIRECTORIES}"
	"${CPP_STANDARD}"
	"${ENABLE_STRICT_WARNINGS}"
)

#########################################################################

# Leviathan input core.
set(LEVIATHAN_INPUT_CORE_NAME "LeviathanInputCore")
set(LEVIATHAN_INPUT_CORE_SOURCE_DIRECTORY "${MODULE_DIRECTORY}/${LEVIATHAN_INPUT_CORE_NAME}/${MODULE_SOURCE_DIRECTORY_NAME}")
set(LEVIATHAN_INPUT_CORE_PRECOMPILED_HEADERS 
	"${LEVIATHAN_INPUT_CORE_SOURCE_DIRECTORY}/${MODULE_PRIVATE_DIRECTORY_NAME}/LeviathanInputCorePch.h"
)
set(LEVIATHAN_INPUT_CORE_HEADERS 
	"${LEVIATHAN_INPUT_CORE_SOURCE_DIRECTORY}/${MODULE_PUBLIC_DIRECTORY_NAME}/LeviathanInputCore.h"
	"${LEVIATHAN_INPUT_CORE_SOURCE_DIRECTORY}/${MODULE_PUBLIC_DIRECTORY_NAME}/PlatformInput.h"
)
set(LEVIATHAN_INPUT_CORE_SOURCES 
	"${LEVIATHAN_INPUT_CORE_SOURCE_DIRECTORY}/${MODULE_PRIVATE_DIRECTORY_NAME}/LeviathanInputCore.cpp"
)
set(LEVIATHAN_INPUT_CORE_LINK_LIBRARIES 
	""
)
set(LEVIATHAN_INPUT_CORE_INCLUDE_DIRECTORIES 
	"${PROJECT_SOURCE_DIR}/${LEVIATHAN_INPUT_CORE_SOURCE_DIRECTORY}/${MODULE_PUBLIC_DIRECTORY_NAME}" 
	"${PROJECT_SOURCE_DIR}/${LEVIATHAN_INPUT_CORE_SOURCE_DIRECTORY}/${MODULE_PRIVATE_DIRECTORY_NAME}"
	"${PROJECT_SOURCE_DIR}/${LEVIATHAN_CORE_SOURCE_DIRECTORY}/${MODULE_PUBLIC_DIRECTORY_NAME}"
)

if(BUILD_PLATFORM_WIN32 MATCHES ON)
	set(LEVIATHAN_INPUT_CORE_HEADERS 
		"${LEVIATHAN_INPUT_CORE_HEADERS}"
		"${LEVIATHAN_INPUT_CORE_SOURCE_DIRECTORY}/${MODULE_PRIVATE_DIRECTORY_NAME}/Win32Input.h"
		"${LEVIATHAN_INPUT_CORE_SOURCE_DIRECTORY}/${MODULE_PRIVATE_DIRECTORY_NAME}/Win32MouseState.h"
		"${LEVIATHAN_INPUT_CORE_SOURCE_DIRECTORY}/${MODULE_PRIVATE_DIRECTORY_NAME}/Win32KeyboardState.h"
		"${LEVIATHAN_INPUT_CORE_SOURCE_DIRECTORY}/${MODULE_PRIVATE_DIRECTORY_NAME}/XInputGamepad.h"
	)
	set(LEVIATHAN_INPUT_CORE_SOURCES 
		"${LEVIATHAN_INPUT_CORE_SOURCES}"
		"${LEVIATHAN_INPUT_CORE_SOURCE_DIRECTORY}/${MODULE_PRIVATE_DIRECTORY_NAME}/Win32Input.cpp"
		"${LEVIATHAN_INPUT_CORE_SOURCE_DIRECTORY}/${MODULE_PRIVATE_DIRECTORY_NAME}/Win32MouseState.cpp"
		"${LEVIATHAN_INPUT_CORE_SOURCE_DIRECTORY}/${MODULE_PRIVATE_DIRECTORY_NAME}/Win32KeyboardState.cpp"
		"${LEVIATHAN_INPUT_CORE_SOURCE_DIRECTORY}/${MODULE_PRIVATE_DIRECTORY_NAME}/XInputGamepad.cpp"
	)
	set(LEVIATHAN_INPUT_CORE_LINK_LIBRARIES 
		"${LEVIATHAN_INPUT_CORE_LINK_LIBRARIES}"
		"xinput.lib"
	)
endif()

add_library_target(
	"${LEVIATHAN_INPUT_CORE_NAME}"
	"${LEVIATHAN_INPUT_CORE_PRECOMPILED_HEADERS}"
	"${LEVIATHAN_INPUT_CORE_HEADERS}"
	"${LEVIATHAN_INPUT_CORE_SOURCES}"
	"${LEVIATHAN_INPUT_CORE_LINK_LIBRARIES}"
	"${LEVIATHAN_INPUT_CORE_INCLUDE_DIRECTORIES}"
	"${CPP_STANDARD}"
	"${ENABLE_STRICT_WARNINGS}"
)

#########################################################################

# Leviathan renderer.
set(LEVIATHAN_RENDERER_NAME "LeviathanRenderer")
set(LEVIATHAN_RENDERER_SOURCE_DIRECTORY "${MODULE_DIRECTORY}/${LEVIATHAN_RENDERER_NAME}/${MODULE_SOURCE_DIRECTORY_NAME}")
set(LEVIATHAN_RENDERER_PRECOMPILED_HEADERS 
	"${LEVIATHAN_RENDERER_SOURCE_DIRECTORY}/${MODULE_PRIVATE_DIRECTORY_NAME}/LeviathanRendererPch.h"
)
set(LEVIATHAN_RENDERER_HEADERS 
	"${LEVIATHAN_RENDERER_SOURCE_DIRECTORY}/${MODULE_PUBLIC_DIRECTORY_NAME}/LeviathanRenderer.h"
)
set(LEVIATHAN_RENDERER_SOURCES 
	"${LEVIATHAN_RENDERER_SOURCE_DIRECTORY}/${MODULE_PRIVATE_DIRECTORY_NAME}/LeviathanRenderer.cpp"
)
set(LEVIATHAN_RENDERER_LINK_LIBRARIES 
	""
)
set(LEVIATHAN_RENDERER_INCLUDE_DIRECTORIES 
	"${PROJECT_SOURCE_DIR}/${LEVIATHAN_RENDERER_SOURCE_DIRECTORY}/${MODULE_PUBLIC_DIRECTORY_NAME}" 
	"${PROJECT_SOURCE_DIR}/${LEVIATHAN_RENDERER_SOURCE_DIRECTORY}/${MODULE_PRIVATE_DIRECTORY_NAME}"
)

if(BUILD_PLATFORM_WIN32 MATCHES ON)
	set(LEVIATHAN_RENDERER_HEADERS 
		"${LEVIATHAN_RENDERER_HEADERS}"
	)
	set(LEVIATHAN_RENDERER_SOURCES 
		"${LEVIATHAN_RENDERER_SOURCES}"
	)
	set(LEVIATHAN_RENDERER_LINK_LIBRARIES 
		"${LEVIATHAN_RENDERER_LINK_LIBRARIES}"
	)
endif()

add_library_target(
	"${LEVIATHAN_RENDERER_NAME}"
	"${LEVIATHAN_RENDERER_PRECOMPILED_HEADERS}"
	"${LEVIATHAN_RENDERER_HEADERS}"
	"${LEVIATHAN_RENDERER_SOURCES}"
	"${LEVIATHAN_RENDERER_LINK_LIBRARIES}"
	"${LEVIATHAN_RENDERER_INCLUDE_DIRECTORIES}"
	"${CPP_STANDARD}"
	"${ENABLE_STRICT_WARNINGS}"
)

#########################################################################

# Test title.
set(TEST_TITLE_NAME "TestTitle")
set(TEST_TITLE_SOURCE_DIRECTORY "${MODULE_DIRECTORY}/${TEST_TITLE_NAME}/${MODULE_SOURCE_DIRECTORY_NAME}")
set(TEST_TITLE_PRECOMPILED_HEADERS 
	"${TEST_TITLE_SOURCE_DIRECTORY}/${MODULE_PRIVATE_DIRECTORY_NAME}/TestTitlePch.h"
)
set(TEST_TITLE_HEADERS 
	"${TEST_TITLE_SOURCE_DIRECTORY}/${MODULE_PUBLIC_DIRECTORY_NAME}/TestTitle.h"
)
set(TEST_TITLE_SOURCES 
	"${TEST_TITLE_SOURCE_DIRECTORY}/${MODULE_PRIVATE_DIRECTORY_NAME}/TestTitle.cpp"
)
set(TEST_TITLE_LINK_LIBRARIES 
	""
)
set(TEST_TITLE_INCLUDE_DIRECTORIES 
	"${PROJECT_SOURCE_DIR}/${TEST_TITLE_SOURCE_DIRECTORY}/${MODULE_PUBLIC_DIRECTORY_NAME}" 
	"${PROJECT_SOURCE_DIR}/${TEST_TITLE_SOURCE_DIRECTORY}/${MODULE_PRIVATE_DIRECTORY_NAME}"
	"${PROJECT_SOURCE_DIR}/${LEVIATHAN_CORE_SOURCE_DIRECTORY}/${MODULE_PUBLIC_DIRECTORY_NAME}"
	"${PROJECT_SOURCE_DIR}/${LEVIATHAN_INPUT_CORE_SOURCE_DIRECTORY}/${MODULE_PUBLIC_DIRECTORY_NAME}"
	"${PROJECT_SOURCE_DIR}/${LEVIATHAN_RENDERER_SOURCE_DIRECTORY}/${MODULE_PUBLIC_DIRECTORY_NAME}"
)

if(BUILD_PLATFORM_WIN32 MATCHES ON)
	set(TEST_TITLE_HEADERS 
		"${TEST_TITLE_HEADERS}"
	)
	set(TEST_TITLE_SOURCES 
		"${TEST_TITLE_SOURCES}"
	)
	set(TEST_TITLE_LINK_LIBRARIES 
		"${TEST_TITLE_LINK_LIBRARIES}"
	)
endif()

add_library_target(
	"${TEST_TITLE_NAME}"
	"${TEST_TITLE_PRECOMPILED_HEADERS}"
	"${TEST_TITLE_HEADERS}"
	"${TEST_TITLE_SOURCES}"
	"${TEST_TITLE_LINK_LIBRARIES}"
	"${TEST_TITLE_INCLUDE_DIRECTORIES}"
	"${CPP_STANDARD}"
	"${ENABLE_STRICT_WARNINGS}"
)

#########################################################################

# Add launcher executable target.
set(EXE_NAME "Launcher")
set(EXE_SOURCE_DIRECTORY "${EXE_NAME}/Source")
set(EXE_PRECOMPILED_HEADERS 
	"${EXE_SOURCE_DIRECTORY}/LauncherPch.h"
)
set(EXE_HEADERS 
	""
)
set(EXE_SOURCES 
	"${EXE_SOURCE_DIRECTORY}/LauncherMain.cpp"
)
# NOTE: Need to link any module libraries that the title module uses to the launcher executable.
set(EXE_LINK_LIBRARIES
	"${LEVIATHAN_CORE_NAME}"
	"${LEVIATHAN_INPUT_CORE_NAME}"
	"${LEVIATHAN_RENDERER_NAME}"
	"${TEST_TITLE_NAME}"
)
# NOTE: Need to include Leviathan core module and the title module building for.
set(EXE_INCLUDE_DIRECTORIES
	"${PROJECT_SOURCE_DIR}/${LEVIATHAN_CORE_SOURCE_DIRECTORY}/Public"
	"${PROJECT_SOURCE_DIR}/${TEST_TITLE_SOURCE_DIRECTORY}/Public"
)

add_executable_target(
	"${EXE_NAME}"
	"${EXE_PRECOMPILED_HEADERS}"
	"${EXE_HEADERS}"
	"${EXE_SOURCES}"
	"${EXE_LINK_LIBRARIES}"
	"${EXE_INCLUDE_DIRECTORIES}"
	"${CPP_STANDARD}"
	"${ENABLE_STRICT_WARNINGS}"
)

# Set Visual Studio startup project.
set_property(DIRECTORY PROPERTY VS_STARTUP_PROJECT "${EXE_NAME}")

# Create master configuration and copy release configuration settings to it.
# Copy configuration code from https://stackoverflow.com/questions/75823363/how-can-i-copy-all-build-type-parameters-from-an-existing-build-configuration-ty
execute_process(
  COMMAND ${CMAKE_COMMAND} --help-variable-list
  OUTPUT_FILE "${CMAKE_CURRENT_BINARY_DIR}/cmake_var_full_list.txt"
)
file(STRINGS "${CMAKE_CURRENT_BINARY_DIR}/cmake_var_full_list.txt" VAR_FULL_LIST)
foreach(var ${VAR_FULL_LIST})
  if("${var}" MATCHES "<CONFIG>")
    if("${var}" MATCHES "<LANG>")
      foreach(lang C CXX CSharp CUDA OBJC OBJCXX Fortran HIP ISPC Swift ASM ASM_NASM ASM_MARMASM ASM_MASM ASM-ATT)
        # (supported languages list from https://cmake.org/cmake/help/latest/command/project.html)
        string(REPLACE "<LANG>" "${lang}" lang_var "${var}")
        list(APPEND CONFIG_VAR_LIST "${lang_var}")
      endforeach()
    else()
      list(APPEND CONFIG_VAR_LIST "${var}")
    endif()
  endif()
endforeach()
unset(VAR_FULL_LIST)

function(copy_configuration_type config_from config_to)
  string(TOUPPER "${config_from}" config_from)
  string(TOUPPER "${config_to}" config_to)
  foreach(config_var ${CONFIG_VAR_LIST})
	if(NOT "${config_var_to}" MATCHES "OUTPUT_DIRECTORY")
		string(REPLACE "<CONFIG>" "${config_from}" config_var_from "${config_var}")
		string(REPLACE "<CONFIG>" "${config_to}"   config_var_to   "${config_var}")
		set("${config_var_to}" "${${config_var_from}}" PARENT_SCOPE)
	endif()
  endforeach()
endfunction()

copy_configuration_type(RELEASE MASTER)
