cmake_minimum_required(VERSION "3.28.0")
project("LeviathanEngine")

# Set output directories.
set(BINARY_OUTPUT_DIRECTORY "Binary")
set(EXECUTABLE_OUTPUT_BINARY_DIRECTORY "${BINARY_OUTPUT_DIRECTORY}/Executable/$<CONFIG>")
set(LIBRARY_OUTPUT_BINARY_DIRECTORY "${BINARY_OUTPUT_DIRECTORY}/Library/$<CONFIG>")
set(SHARED_PRECOMPILED_HEADERS_DIRECTORY "${CMAKE_CURRENT_SOURCE_DIR}/SharedPrecompiledHeaders")

set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY "${LIBRARY_OUTPUT_BINARY_DIRECTORY}")
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY "${LIBRARY_OUTPUT_BINARY_DIRECTORY}")
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY "${EXECUTABLE_OUTPUT_BINARY_DIRECTORY}")

# Build settings.
set(CPP_STANDARD 23)
set(ENABLE_STRICT_WARNINGS ON)

# Only one platform build target should be set to ON at a time.
set(BUILD_PLATFORM_WIN32 ON)

# Adds the compile definition to project wide pre-processor definitions if the condition variable matches ON.
function(add_compile_definition_if_enabled condition definition)
	if(${${condition}} MATCHES ON)
		add_compile_definitions(${${definition}})
	endif()
endfunction()

# Build definitions.
set(BUILD_PLATFORM_WIN32_DEFINITION "LEVIATHAN_BUILD_PLATFORM_WIN32")

# Add project wide pre-processor definitions.
add_compile_definition_if_enabled(BUILD_PLATFORM_WIN32 BUILD_PLATFORM_WIN32_DEFINITION)

# Adds a library target with optional arguments to the project. Arguments are unnamed to be optional so that empty strings can be supported in a function parameter. 
# Optional arguments must be entered in the order: TARGET_NAME PRECOMPILED_HEADERS HEADERS SOURCES LINK_LIBRARIES INCLUDE_DIRECTORIES CPP_STANDARD ENABLE_STRICT_WARNING_LEVEL.
function(add_library_target)
	add_library("${ARGV0}" STATIC "${ARGV2}" "${ARGV3}")
	set_property(TARGET "${ARGV0}" PROPERTY CXX_STANDARD ${ARGV6})
	
	if("${ARGV7}" MATCHES ON)
		target_compile_options("${ARGV0}" PRIVATE $<$<CXX_COMPILER_ID:MSVC>:/W4 /WX> $<$<NOT:$<CXX_COMPILER_ID:MSVC>>:-Wall -Wextra -Wpedantic -Werror>)	
	endif()
	
	target_precompile_headers("${ARGV0}" PRIVATE "${ARGV1}")
	target_link_libraries("${ARGV0}" "${ARGV4}")
	target_include_directories("${ARGV0}" PRIVATE "${ARGV5}")
endfunction()

# Adds an executable target with optional arguments to the project. Arguments are unnamed to be optional so that empty strings can be supported in a function parameter. 
# Optional arguments must be entered in the order: TARGET_NAME PRECOMPILED_HEADERS HEADERS SOURCES LINK_LIBRARIES INCLUDE_DIRECTORIES CPP_STANDARD ENABLE_STRICT_WARNING_LEVEL.
function(add_executable_target [IN_TARGET_NAME IN_PRECOMPILED_HEADERS IN_HEADERS IN_SOURCES IN_LINK_LIBRARIES IN_INCLUDE_DIRECTORIES])
	if(BUILD_PLATFORM_WIN32 MATCHES ON)
		add_executable("${ARGV0}" WIN32 "${ARGV2}" "${ARGV3}")
	else()
		add_executable("${ARGV0}" "${ARGV2}" "${ARGV3}")
	endif()
	
	set_property(TARGET "${ARGV0}" PROPERTY CXX_STANDARD ${ARGV6})
	
	if("${ARGV7}" MATCHES ON)
		target_compile_options("${ARGV0}" PRIVATE $<$<CXX_COMPILER_ID:MSVC>:/W4 /WX> $<$<NOT:$<CXX_COMPILER_ID:MSVC>>:-Wall -Wextra -Wpedantic -Werror>)
	endif()
	
	target_precompile_headers("${ARGV0}" PRIVATE "${ARGV1}")
	target_link_libraries("${ARGV0}" "${ARGV4}")
	target_include_directories("${ARGV0}" PRIVATE "${ARGV5}")
endfunction()

# Set module directory.
set(MODULE_DIRECTORY "Modules")

# Add engine module library targets.
#########################################################################

# Leviathan core.
set(LEVIATHAN_CORE_NAME "LeviathanCore")
set(LEVIATHAN_CORE_SOURCE_DIRECTORY "${MODULE_DIRECTORY}/${LEVIATHAN_CORE_NAME}/Source")
set(LEVIATHAN_CORE_PRECOMPILED_HEADERS 
	"${SHARED_PRECOMPILED_HEADERS_DIRECTORY}/StandardPch.h"
)
set(LEVIATHAN_CORE_HEADERS 
	"${LEVIATHAN_CORE_SOURCE_DIRECTORY}/Public/LeviathanCore.h"
	"${LEVIATHAN_CORE_SOURCE_DIRECTORY}/Public/PlatformEntryPrototype.h"
	"${LEVIATHAN_CORE_SOURCE_DIRECTORY}/Public/Platform.h"
	"${LEVIATHAN_CORE_SOURCE_DIRECTORY}/Public/Core.h"
	"${LEVIATHAN_CORE_SOURCE_DIRECTORY}/Public/Callback.h"
	"${LEVIATHAN_CORE_SOURCE_DIRECTORY}/Private/PlatformWindow.h"
	"${LEVIATHAN_CORE_SOURCE_DIRECTORY}/Public/InputKey.h"
	"${LEVIATHAN_CORE_SOURCE_DIRECTORY}/Public/Bits.h"
)
set(LEVIATHAN_CORE_SOURCES 
	"${LEVIATHAN_CORE_SOURCE_DIRECTORY}/Private/LeviathanCore.cpp"
	"${LEVIATHAN_CORE_SOURCE_DIRECTORY}/Private/Core.cpp"
	"${LEVIATHAN_CORE_SOURCE_DIRECTORY}/Private/InputKey.cpp"
)
set(LEVIATHAN_CORE_LINK_LIBRARIES 
	""
)
set(LEVIATHAN_CORE_INCLUDE_DIRECTORIES 
	"${PROJECT_SOURCE_DIR}/${LEVIATHAN_CORE_SOURCE_DIRECTORY}/Public" 
	"${PROJECT_SOURCE_DIR}/${LEVIATHAN_CORE_SOURCE_DIRECTORY}/Private"
)

if(BUILD_PLATFORM_WIN32 MATCHES ON)
	set(LEVIATHAN_CORE_PRECOMPILED_HEADERS 
		"${LEVIATHAN_CORE_PRECOMPILED_HEADERS}" 
		"${SHARED_PRECOMPILED_HEADERS_DIRECTORY}/Win32Pch.h"
	)
	set(LEVIATHAN_CORE_HEADERS 
		"${LEVIATHAN_CORE_HEADERS}"
		"${LEVIATHAN_CORE_SOURCE_DIRECTORY}/Private/Win32Window.h"
	)
	set(LEVIATHAN_CORE_SOURCES 
		"${LEVIATHAN_CORE_SOURCES}"
		"${LEVIATHAN_CORE_SOURCE_DIRECTORY}/Private/Win32Platform.cpp"
		"${LEVIATHAN_CORE_SOURCE_DIRECTORY}/Private/Win32Window.cpp"
	)
endif()

add_library_target(
	"${LEVIATHAN_CORE_NAME}"
	"${LEVIATHAN_CORE_PRECOMPILED_HEADERS}"
	"${LEVIATHAN_CORE_HEADERS}"
	"${LEVIATHAN_CORE_SOURCES}"
	"${LEVIATHAN_CORE_LINK_LIBRARIES}"
	"${LEVIATHAN_CORE_INCLUDE_DIRECTORIES}"
	"${CPP_STANDARD}"
	"${ENABLE_STRICT_WARNINGS}"
)

#########################################################################

# Leviathan input.
set(LEVIATHAN_INPUT_NAME "LeviathanInput")
set(LEVIATHAN_INPUT_SOURCE_DIRECTORY "${MODULE_DIRECTORY}/${LEVIATHAN_INPUT_NAME}/Source")
set(LEVIATHAN_INPUT_PRECOMPILED_HEADERS 
	"${SHARED_PRECOMPILED_HEADERS_DIRECTORY}/StandardPch.h"
)
set(LEVIATHAN_INPUT_HEADERS 
	"${LEVIATHAN_INPUT_SOURCE_DIRECTORY}/Public/LeviathanInput.h"
	"${LEVIATHAN_INPUT_SOURCE_DIRECTORY}/Public/PlatformInput.h"
)
set(LEVIATHAN_INPUT_SOURCES 
	"${LEVIATHAN_INPUT_SOURCE_DIRECTORY}/Private/LeviathanInput.cpp"
)
set(LEVIATHAN_INPUT_LINK_LIBRARIES 
	""
)
set(LEVIATHAN_INPUT_INCLUDE_DIRECTORIES 
	"${PROJECT_SOURCE_DIR}/${LEVIATHAN_INPUT_SOURCE_DIRECTORY}/Public" 
	"${PROJECT_SOURCE_DIR}/${LEVIATHAN_INPUT_SOURCE_DIRECTORY}/Private"
	"${PROJECT_SOURCE_DIR}/${LEVIATHAN_CORE_SOURCE_DIRECTORY}/Public"
)

if(BUILD_PLATFORM_WIN32 MATCHES ON)
	set(LEVIATHAN_INPUT_PRECOMPILED_HEADERS 
		"${LEVIATHAN_INPUT_PRECOMPILED_HEADERS}" 
		"${SHARED_PRECOMPILED_HEADERS_DIRECTORY}/Win32Pch.h"
	)
	set(LEVIATHAN_INPUT_HEADERS 
		"${LEVIATHAN_INPUT_HEADERS}"
		"${LEVIATHAN_INPUT_SOURCE_DIRECTORY}/Private/Win32Input.h"
		"${LEVIATHAN_INPUT_SOURCE_DIRECTORY}/Private/Win32MouseState.h"
		"${LEVIATHAN_INPUT_SOURCE_DIRECTORY}/Private/Win32KeyboardState.h"
		"${LEVIATHAN_INPUT_SOURCE_DIRECTORY}/Private/XInputGamepad.h"
	)
	set(LEVIATHAN_INPUT_SOURCES 
		"${LEVIATHAN_INPUT_SOURCES}"
		"${LEVIATHAN_INPUT_SOURCE_DIRECTORY}/Private/Win32Input.cpp"
		"${LEVIATHAN_INPUT_SOURCE_DIRECTORY}/Private/Win32MouseState.cpp"
		"${LEVIATHAN_INPUT_SOURCE_DIRECTORY}/Private/Win32KeyboardState.cpp"
		"${LEVIATHAN_INPUT_SOURCE_DIRECTORY}/Private/XInputGamepad.cpp"
	)
endif()

add_library_target(
	"${LEVIATHAN_INPUT_NAME}"
	"${LEVIATHAN_INPUT_PRECOMPILED_HEADERS}"
	"${LEVIATHAN_INPUT_HEADERS}"
	"${LEVIATHAN_INPUT_SOURCES}"
	"${LEVIATHAN_INPUT_LINK_LIBRARIES}"
	"${LEVIATHAN_INPUT_INCLUDE_DIRECTORIES}"
	"${CPP_STANDARD}"
	"${ENABLE_STRICT_WARNINGS}"
)

#########################################################################

# Test title.
set(TEST_TITLE_NAME "TestTitle")
set(TEST_TITLE_SOURCE_DIRECTORY "${MODULE_DIRECTORY}/${TEST_TITLE_NAME}/Source")
set(TEST_TITLE_PRECOMPILED_HEADERS 
	"${SHARED_PRECOMPILED_HEADERS_DIRECTORY}/StandardPch.h"
)
set(TEST_TITLE_HEADERS 
	"${TEST_TITLE_SOURCE_DIRECTORY}/Public/TestTitle.h"
)
set(TEST_TITLE_SOURCES 
	"${TEST_TITLE_SOURCE_DIRECTORY}/Private/TestTitle.cpp"
)
set(TEST_TITLE_LINK_LIBRARIES 
	""
)
set(TEST_TITLE_INCLUDE_DIRECTORIES 
	"${PROJECT_SOURCE_DIR}/${TEST_TITLE_SOURCE_DIRECTORY}/Public" 
	"${PROJECT_SOURCE_DIR}/${TEST_TITLE_SOURCE_DIRECTORY}/Private"
	"${PROJECT_SOURCE_DIR}/${LEVIATHAN_CORE_SOURCE_DIRECTORY}/Public"
	"${PROJECT_SOURCE_DIR}/${LEVIATHAN_INPUT_SOURCE_DIRECTORY}/Public"
)

if(BUILD_PLATFORM_WIN32 MATCHES ON)
	set(TEST_TITLE_PRECOMPILED_HEADERS 
		"${TEST_TITLE_PRECOMPILED_HEADERS}" 
		"${SHARED_PRECOMPILED_HEADERS_DIRECTORY}/Win32Pch.h"
	)
	set(TEST_TITLE_HEADERS 
		"${TEST_TITLE_HEADERS}"
	)
	set(TEST_TITLE_SOURCES 
		"${TEST_TITLE_SOURCES}"
	)
endif()

add_library_target(
	"${TEST_TITLE_NAME}"
	"${TEST_TITLE_PRECOMPILED_HEADERS}"
	"${TEST_TITLE_HEADERS}"
	"${TEST_TITLE_SOURCES}"
	"${TEST_TITLE_LINK_LIBRARIES}"
	"${TEST_TITLE_INCLUDE_DIRECTORIES}"
	"${CPP_STANDARD}"
	"${ENABLE_STRICT_WARNINGS}"
)

#########################################################################

# Add launcher executable target.
set(EXE_NAME "Launcher")
set(EXE_SOURCE_DIRECTORY "${EXE_NAME}/Source")
set(EXE_PRECOMPILED_HEADERS 
	"${SHARED_PRECOMPILED_HEADERS_DIRECTORY}/StandardPch.h"
)
set(EXE_HEADERS 
	""
)
set(EXE_SOURCES 
	"${EXE_SOURCE_DIRECTORY}/LauncherMain.cpp"
)
set(EXE_LINK_LIBRARIES
	"${LEVIATHAN_CORE_NAME}"
	"${LEVIATHAN_INPUT_NAME}"
	"${TEST_TITLE_NAME}"
)
set(EXE_INCLUDE_DIRECTORIES
	"${PROJECT_SOURCE_DIR}/${LEVIATHAN_CORE_SOURCE_DIRECTORY}/Public"
	"${PROJECT_SOURCE_DIR}/${LEVIATHAN_INPUT_SOURCE_DIRECTORY}/Public"
	"${PROJECT_SOURCE_DIR}/${TEST_TITLE_SOURCE_DIRECTORY}/Public"
)

if(BUILD_PLATFORM_WIN32 MATCHES ON)
	set(EXE_PRECOMPILED_HEADERS 
		"${EXE_PRECOMPILED_HEADERS}" 
		"${SHARED_PRECOMPILED_HEADERS_DIRECTORY}/Win32Pch.h"
	)
endif()

add_executable_target(
	"${EXE_NAME}"
	"${EXE_PRECOMPILED_HEADERS}"
	"${EXE_HEADERS}"
	"${EXE_SOURCES}"
	"${EXE_LINK_LIBRARIES}"
	"${EXE_INCLUDE_DIRECTORIES}"
	"${CPP_STANDARD}"
	"${ENABLE_STRICT_WARNINGS}"
)

# Set Visual Studio startup project.
set_property(DIRECTORY PROPERTY VS_STARTUP_PROJECT "${EXE_NAME}")
